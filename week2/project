{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOIXsAyJftJJ5dpIJWkzhHW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/damon022002/projectWeek2Mod10/blob/master/week2/project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4vN3Kst6uO5n",
        "outputId": "c8ba7e60-8c36-4ad5-ca3d-7bafd6db922f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "libgraphviz-dev is already the newest version (2.40.1-2).\n",
            "The following package was automatically installed and is no longer required:\n",
            "  libnvidia-common-460\n",
            "Use 'apt autoremove' to remove it.\n",
            "0 upgraded, 0 newly installed, 0 to remove and 5 not upgraded.\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pygraphviz in /usr/local/lib/python3.7/dist-packages (1.7)\n"
          ]
        }
      ],
      "source": [
        "# The following includes are needed to work with graphs and display solutions.\n",
        "%matplotlib inline\n",
        "# Extra package need to be installed on Google Colab.\n",
        "!apt install libgraphviz-dev\n",
        "!pip install pygraphviz\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import networkx as nx\n",
        "from IPython.display import display\n",
        "import random\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# book of standford uni ch5 pagerank\n",
        "# ✦ Taxation Schemes: To counter the effect of spider traps (and of dead ends,\n",
        "# if we do not eliminate them), PageRank is normally computed in a way\n",
        "# that modifies the simple iterative multiplication by the transition matrix.\n",
        "# A parameter β is chosen, typically around 0.85. Given an estimate of the\n",
        "# PageRank, the next estimate is computed by multiplying the estimate by\n",
        "# β times the transition matrix, and then adding (1 − β)/n to the estimate\n",
        "# for each page, where n is the total number of pages.\n",
        "\n",
        "# https://www.youtube.com/watch?v=blvMKHJFkPo\n",
        "# rank of each \"farm\" page by using spider traps avoidance: beta * (all received pageRanks)+ (1 - beta) / totalNodes\n",
        "\n",
        "\n",
        "# For each accessible page P, rP is its PageRank; you can sum them into a single variable\n",
        "# n is number of inaccessable pages which links to the accessable pages\n",
        "# beta is the spider trap avoidance\n",
        "# p is number of accessable pages\n",
        "# f is number of supporting spam pages\n",
        "# r = β · sum(rP) , which r is, essentially, the external PageRank contribution towards T\n",
        "\n",
        "# the graph is as follows:\n",
        "# every inaccessable node (n nodes) is connected to every accessible node (p). which will make the page rank of one\n",
        "# accessible node = n * initialRank / p;\n",
        "# then every accessible node will go to target page T. and to calculate the external contribution from P to T. we use\n",
        "# beta * sum(rp), because every pageRank in P is the same we can calculate it as = beta * rp * p.\n",
        "# then we will calculate the pagerank his spammer with the use the use of spider traps avoidance, which will be:\n",
        "# oneSpammer = beta * ( t/f) + (1-beta) / total\n",
        "\n",
        "# finally we can calculate the pagerank of t which is: r + beta*f (oneSpammer) + (1 - beta) / N, after apply oneSpammer\n",
        "# you get: t = r + (beta^2)*t + (beta(1-beta)*f) / total +\n",
        "# when simplying t and ignoring the last part ((1-beta)/ total) you get:\n",
        "# t = r / (1 - beta*beta) + c*f/total where c = beta/(1-beta)\n",
        "def pageRank(p, f):\n",
        "    n = 100  # fixed\n",
        "    beta = 0.85  # fixed\n",
        "    total = n + p + f + 1\n",
        "    initialRank = 1 / total\n",
        "\n",
        "    #define pageRankOneP!!!!\n",
        "    #Contribution x from outside, as we have assumed.\n",
        "    #with beta:\n",
        "    pageRankOneP = beta*(n*initialRank/p) + (1-beta)/n\n",
        "    #without beta:\n",
        "    # pageRankOneP = n * initialRank / p\n",
        "    r = beta * pageRankOneP * p\n",
        "\n",
        "    # now calculate the external contribution of the spammers and T:\n",
        "    t = r / (1 - beta*beta) + (beta/(1-beta))*f/total\n",
        "    # oneSpammer = beta * (t / f) + (1 - beta) / total\n",
        "\n",
        "    print(\"\\n for n: {} \\t p: a {} nd \\t f: {}\".format(n, p, f))\n",
        "    print(\"the external contribution r is {}\".format(r))\n",
        "    print(\"The T pageRank is {}\".format(t))\n",
        "    # print(\"The OneSpammer PageRank is {}\".format(oneSpammer))\n",
        "\n",
        "pageRank(1, 5)\n",
        "\n",
        "pageRank(1, 10)\n",
        "\n",
        "pageRank(5, 5)\n",
        "\n",
        "\n",
        "# if f gets bigger, than also t will also get bigger, there is an linear relationship between t and f\n",
        "# same with r, if r gets bigger than t will also get bigger, linear relationship\n",
        "\n",
        "\n",
        "def pageRankFixedR():\n",
        "    n = 100  # fixed\n",
        "    beta = 0.85  # fixed\n",
        "    p = 4   #fixed\n",
        "    fixedR = 0.6   #fixed\n",
        "    # now calculate the external contribution of the spammers and with different f:\n",
        "    listF = [1,5,10,20,50,75,100]\n",
        "    #total = n + p + f + 1\n",
        "    listT = [fixedR / (1 - beta*beta) + (beta/(1-beta))*f/(n + p + f + 1) for f in listF]\n",
        "\n",
        "    \n",
        "    x = np.array(listF)\n",
        "    y = np.array(listT)\n",
        "    plt.plot(x, y, 'o')\n",
        "    \n",
        "    #obtain m (slope) and b(intercept) of linear regression line\n",
        "    m, b = np.polyfit(x, y, 1)\n",
        "    #add linear regression line to scatterplot \n",
        "    plt.plot(x, m*x+b)\n",
        "    plt.title(\"relationship between pageRank T and number of spammer pages f\")\n",
        "    plt.xlabel(\"number of spammer pages f\")\n",
        "    plt.ylabel(\"pageRank of T\")\n",
        "    plt.show()\n",
        "    print(\"\\n\")\n",
        "\n",
        "def pageRankFixedF():\n",
        "    n = 100  # fixed\n",
        "    beta = 0.85  # fixed\n",
        "    p = 2   # fixed\n",
        "    fixedF = 10 # fixed\\\n",
        "\n",
        "    # now calculate the external contribution of the spammers and with different r:\n",
        "    listR = [0.4,0.6,1,1.5,2.0,5,7]\n",
        "    #total = n + p + f + 1\n",
        "    listT = [r / (1 - beta*beta) + (beta/(1-beta))*fixedF/(n + p + fixedF + 1) for r in listR]\n",
        "\n",
        "    \n",
        "    x = np.array(listR)\n",
        "    y = np.array(listT)\n",
        "    plt.plot(x, y, 'o')\n",
        "    \n",
        "    #obtain m (slope) and b(intercept) of linear regression line\n",
        "    m, b = np.polyfit(x, y, 1)\n",
        "    #add linear regression line to scatterplot \n",
        "    plt.plot(x, m*x+b)\n",
        "    plt.title(\"relationship between pageRank T and external contribution r\")\n",
        "    plt.xlabel(\"external contribution r\")\n",
        "    plt.ylabel(\"pageRank of T\")\n",
        "    plt.show()\n",
        "    print(\"\\n\")\n",
        "\n",
        "pageRankFixedR()\n",
        "\n",
        "pageRankFixedF()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 859
        },
        "id": "evt_rYSNuTpm",
        "outputId": "cc1b2e93-c5f9-41e7-a20f-f071327314d3"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " for n: 100 \t p: a 1 nd \t f: 5\n",
            "the external contribution r is 0.6765086448598129\n",
            "The T pageRank is 2.7026664982739734\n",
            "\n",
            " for n: 100 \t p: a 1 nd \t f: 10\n",
            "the external contribution r is 0.6463642857142856\n",
            "The T pageRank is 2.835193050193049\n",
            "\n",
            " for n: 100 \t p: a 5 nd \t f: 5\n",
            "the external contribution r is 0.6572759009009009\n",
            "The T pageRank is 2.623817060303546\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n"
          ]
        }
      ]
    }
  ]
}